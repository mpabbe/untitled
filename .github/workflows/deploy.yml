name: Build and Deploy

on:
  push:
    branches:
      - release
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Deployment Start
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "üöÄ <b>Deployment Started</b>\n\nüì± <b>Project:</b> untitled\nüåø <b>Branch:</b> ${{ github.ref_name }}\nüë§ <b>Triggered by:</b> ${{ github.actor }}\n‚è∞ <b>Time:</b> $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n\nüîÑ Building Android and Windows versions...",
              "parse_mode": "HTML"
            }'

  build-android:
    runs-on: ubuntu-latest
    needs: notify-start
    steps:
      - uses: actions/checkout@v4
      
      - name: Notify Android Build Start
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "ü§ñ <b>Android Build Started</b>\n\nüì¶ Setting up environment...\n‚Ä¢ Java 17\n‚Ä¢ Flutter 3.32.6\n‚Ä¢ Dependencies",
              "parse_mode": "HTML"
            }'
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'
          
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get
          
      - name: Notify Android Building
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "üî® <b>Building Android APK...</b>\n\n‚öôÔ∏è Running: flutter build apk --release",
              "parse_mode": "HTML"
            }'
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: just-for-test-2c462
          
      - name: Upload to Firebase Storage
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          
      - name: Get version from pubspec
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Notify Android Upload
        run: |
          VERSION="${{ github.event.inputs.version || steps.version.outputs.version }}"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "‚òÅÔ∏è <b>Uploading Android APK...</b>\n\nüì± <b>Version:</b> '${VERSION}'\nüîó <b>Storage:</b> Firebase Storage\nüìä <b>Database:</b> Firestore",
              "parse_mode": "HTML"
            }'
          
      - name: Upload APK
        run: |
          VERSION="${{ github.event.inputs.version || steps.version.outputs.version }}"
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gsutil -m cp build/app/outputs/flutter-apk/app-release.apk gs://just-for-test-2c462.firebasestorage.app/releases/android/app-${VERSION}.apk
          
      - name: Update Firestore
        run: |
          VERSION="${{ github.event.inputs.version || steps.version.outputs.version }}"
          curl -X PATCH \
            "https://firestore.googleapis.com/v1/projects/just-for-test-2c462/databases/(default)/documents/app_versions/android" \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            -H "Content-Type: application/json" \
            -d '{
              "fields": {
                "version": {"stringValue": "'${VERSION}'"},
                "downloadUrl": {"stringValue": "https://storage.googleapis.com/just-for-test-2c462.firebasestorage.app/releases/android/app-'${VERSION}'.apk"},
                "releaseDate": {"timestampValue": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"},
                "description": {"stringValue": "Latest release from branch"}
              }
            }'
            
      - name: Notify Android Success
        if: success()
        run: |
          VERSION="${{ github.event.inputs.version || steps.version.outputs.version }}"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "‚úÖ <b>Android Build Completed!</b>\n\nüì± <b>Version:</b> '${VERSION}'\nüì¶ <b>APK Size:</b> $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)\nüîó <b>Download:</b> https://storage.googleapis.com/just-for-test-2c462.firebasestorage.app/releases/android/app-'${VERSION}'.apk\n\nüéØ Ready for installation!",
              "parse_mode": "HTML"
            }'
            
      - name: Notify Android Failure
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "‚ùå <b>Android Build Failed!</b>\n\nüîç Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "parse_mode": "HTML"
            }'

  build-windows:
    runs-on: windows-latest
    needs: notify-start
    steps:
      - uses: actions/checkout@v4
      
      - name: Notify Windows Build Start
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/json" -d '{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"ü™ü <b>Windows Build Started</b>\\n\\nüì¶ Setting up environment...\\n‚Ä¢ Flutter 3.32.6\\n‚Ä¢ Python Build Script\", \"parse_mode\": \"HTML\"}'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'
          
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get
          
      - name: Notify Windows Building
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/json" -d '{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"üî® <b>Building Windows App...</b>\\n\\n‚öôÔ∏è Running: flutter build windows --release\", \"parse_mode\": \"HTML\"}'
        
      - name: Build Windows
        run: flutter build windows --release
        
      - name: Create Installer
        run: python build.py
        
      - name: Get version from pubspec
        id: version
        run: |
          $VERSION = (Select-String -Path "pubspec.yaml" -Pattern "^version:").Line.Split(" ")[1].Split("+")[0]
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          
      - name: Notify Windows Upload
        run: |
          $VERSION = "${{ github.event.inputs.version || steps.version.outputs.version }}"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/json" -d ('{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"‚òÅÔ∏è <b>Uploading Windows Installer...</b>\\n\\nü™ü <b>Version:</b> ' + $VERSION + '\\nüîó <b>Storage:</b> Firebase Storage\\nüìä <b>Database:</b> Firestore\", \"parse_mode\": \"HTML\"}')
          
      - name: Upload to Firebase Storage
        run: |
          $VERSION = "${{ github.event.inputs.version || steps.version.outputs.version }}"
          gcloud auth activate-service-account --key-file="${{ secrets.FIREBASE_SERVICE_ACCOUNT_FILE }}"
          gsutil -m cp installer/untitled_Windows.zip gs://just-for-test-2c462.firebasestorage.app/releases/windows/app-${VERSION}.zip
          
      - name: Update Firestore
        run: |
          $VERSION = "${{ github.event.inputs.version || steps.version.outputs.version }}"
          $TOKEN = gcloud auth print-access-token
          Invoke-RestMethod -Uri "https://firestore.googleapis.com/v1/projects/just-for-test-2c462/databases/(default)/documents/app_versions/windows" -Method PATCH -Headers @{"Authorization"="Bearer $TOKEN"; "Content-Type"="application/json"} -Body (@{
            fields = @{
              version = @{stringValue = $VERSION}
              downloadUrl = @{stringValue = "https://storage.googleapis.com/just-for-test-2c462.firebasestorage.app/releases/windows/app-$VERSION.zip"}
              releaseDate = @{timestampValue = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")}
              description = @{stringValue = "Latest release from branch"}
            }
          } | ConvertTo-Json -Depth 3)
          
      - name: Notify Windows Success
        if: success()
        run: |
          $VERSION = "${{ github.event.inputs.version || steps.version.outputs.version }}"
          $SIZE = (Get-Item "installer/untitled_Windows.zip").Length / 1MB
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/json" -d ('{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"‚úÖ <b>Windows Build Completed!</b>\\n\\nü™ü <b>Version:</b> ' + $VERSION + '\\nüì¶ <b>ZIP Size:</b> ' + [math]::Round($SIZE, 1) + ' MB\\nüîó <b>Download:</b> https://storage.googleapis.com/just-for-test-2c462.firebasestorage.app/releases/windows/app-' + $VERSION + '.zip\\n\\nüéØ Ready for installation!\", \"parse_mode\": \"HTML\"}')
          
      - name: Notify Windows Failure
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/json" -d '{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"‚ùå <b>Windows Build Failed!</b>\\n\\nüîç Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\", \"parse_mode\": \"HTML\"}'

  notify-completion:
    runs-on: ubuntu-latest
    needs: [build-android, build-windows]
    if: always()
    steps:
      - name: Notify Deployment Complete
        run: |
          if [[ "${{ needs.build-android.result }}" == "success" && "${{ needs.build-windows.result }}" == "success" ]]; then
            STATUS="‚úÖ <b>Deployment Completed Successfully!</b>"
            MESSAGE="üéâ Both Android and Windows builds are ready!\n\nüì± Android APK: Ready\nü™ü Windows ZIP: Ready\n\nüöÄ Users can now update their apps!"
          else
            STATUS="‚ö†Ô∏è <b>Deployment Completed with Issues</b>"
            MESSAGE="üì± Android: ${{ needs.build-android.result }}\nü™ü Windows: ${{ needs.build-windows.result }}\n\nüîç Check individual build logs for details."
          fi
          
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "'$STATUS'\n\n'$MESSAGE'\n\n‚è±Ô∏è <b>Total Time:</b> ${{ github.event.head_commit.timestamp }}\nüîó <b>Workflow:</b> https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "parse_mode": "HTML"
            }'
